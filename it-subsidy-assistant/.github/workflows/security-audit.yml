name: Security Audit & OWASP Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 週次セキュリティスキャン（日曜日 2:00 JST）
    - cron: '0 17 * * 0'

env:
  NODE_VERSION: '18'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level high
        
      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      - name: ESLint Security Scan
        run: |
          npm ci
          npm run lint:security

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  owasp-dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'it-subsidy-assistant'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            
      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: reports/

  container-security:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: docker build -t it-subsidy-assistant:security-test .
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'it-subsidy-assistant:security-test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  web-security-test:
    name: Web Application Security Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: it_subsidy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start application
        run: |
          npm run build
          npm start &
          sleep 30
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/it_subsidy_test
          
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start application
        run: |
          npm run build
          npm start &
          sleep 30
          
      - name: Check Security Headers
        run: |
          # CSPチェック
          CSP_HEADER=$(curl -s -I http://localhost:3000 | grep -i "content-security-policy")
          if [ -z "$CSP_HEADER" ]; then
            echo "❌ Content-Security-Policy header missing"
            exit 1
          fi
          
          # HSTS チェック
          HSTS_HEADER=$(curl -s -I http://localhost:3000 | grep -i "strict-transport-security")
          if [ -z "$HSTS_HEADER" ]; then
            echo "❌ Strict-Transport-Security header missing"
            exit 1
          fi
          
          # X-Frame-Options チェック
          XFRAME_HEADER=$(curl -s -I http://localhost:3000 | grep -i "x-frame-options")
          if [ -z "$XFRAME_HEADER" ]; then
            echo "❌ X-Frame-Options header missing"
            exit 1
          fi
          
          echo "✅ All security headers present"

  gdpr-compliance:
    name: GDPR Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: GDPR Compliance Test
        run: |
          echo "🔍 GDPR Compliance checks..."
          
          # プライバシーポリシー存在確認
          if [ ! -f "public/privacy-policy.html" ]; then
            echo "❌ Privacy policy missing"
            exit 1
          fi
          
          # Cookie同意機能確認
          if ! grep -r "cookie.*consent" src/; then
            echo "❌ Cookie consent mechanism missing"
            exit 1
          fi
          
          # データ削除機能確認
          if ! grep -r "deleteUserData\|eraseUserData" src/; then
            echo "❌ Data deletion functionality missing"
            exit 1
          fi
          
          # データエクスポート機能確認
          if ! grep -r "exportUserData" src/; then
            echo "❌ Data export functionality missing"
            exit 1
          fi
          
          echo "✅ GDPR compliance checks passed"

  penetration-test:
    name: Automated Penetration Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # 週次実行のみ
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start application
        run: |
          npm run build
          npm start &
          sleep 30
          
      - name: Run Nuclei Security Scanner
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:3000'
          github-report: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-analysis, secret-scan, owasp-dependency-check, container-security]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate Security Summary
        run: |
          echo "# Security Audit Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- SAST Analysis: ${{ needs.sast-analysis.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- OWASP Check: ${{ needs.owasp-dependency-check.result }}" >> security-report.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> security-report.md
          
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-report.md
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Audit Results\n\n${report}`
            });