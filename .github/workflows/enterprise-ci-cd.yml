name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前2時に定期セキュリティスキャン
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  CACHE_VERSION: v1

jobs:
  # 依存関係検証（新規追加）
  dependency-validation:
    name: Dependency Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Validate package.json files
      run: |
        echo "🔍 Validating package.json structure..."
        for pkg in it-subsidy-assistant/frontend/package.json it-subsidy-assistant/backend/package.json; do
          if [ -f "$pkg" ]; then
            node -e "JSON.parse(require('fs').readFileSync('$pkg', 'utf8'))" || exit 1
            echo "✅ $pkg is valid"
          fi
        done

    - name: Check required dependencies
      run: |
        echo "📦 Checking required dependencies..."
        cd it-subsidy-assistant/frontend
        npm ls react react-dom typescript || echo "⚠️ Missing frontend dependencies"
        cd ../backend
        npm ls express typescript @types/node || echo "⚠️ Missing backend dependencies"

    - name: Verify lock files
      run: |
        echo "🔒 Verifying package-lock.json files..."
        if [ ! -f "it-subsidy-assistant/frontend/package-lock.json" ]; then
          echo "❌ Frontend package-lock.json is missing!"
          exit 1
        fi
        if [ ! -f "it-subsidy-assistant/backend/package-lock.json" ]; then
          echo "❌ Backend package-lock.json is missing!"
          exit 1
        fi
        echo "✅ All lock files present"

  # コード品質チェック
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: dependency-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # SonarQube分析のため全履歴取得

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          */node_modules
        key: ${{ runner.os }}-npm-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-${{ env.CACHE_VERSION }}-

    - name: Install dependencies with validation
      run: |
        echo "📦 Installing dependencies with integrity check..."
        npm ci --prefer-offline || (echo "❌ Root npm ci failed" && exit 1)
        cd it-subsidy-assistant/frontend && npm ci --prefer-offline || (echo "❌ Frontend npm ci failed" && exit 1)
        cd ../backend && npm ci --prefer-offline || (echo "❌ Backend npm ci failed" && exit 1)

    - name: Run ESLint (Frontend)
      run: |
        cd it-subsidy-assistant/frontend
        npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
        npx eslint . --ext .js,.jsx,.ts,.tsx

    - name: Run ESLint (Backend)
      run: |
        cd it-subsidy-assistant/backend
        npx eslint . --ext .js,.ts --format json --output-file eslint-results.json || true
        npx eslint . --ext .js,.ts

    - name: Run Prettier check
      run: |
        cd it-subsidy-assistant/frontend && npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,md}"
        cd ../backend && npx prettier --check "src/**/*.{js,ts,json,md}"

    - name: TypeScript check (Frontend)
      run: |
        cd it-subsidy-assistant/frontend
        npx tsc --noEmit

    - name: TypeScript check (Backend)
      run: |
        cd it-subsidy-assistant/backend
        npx tsc --noEmit

    - name: Upload ESLint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: eslint-results
        path: |
          it-subsidy-assistant/frontend/eslint-results.json
          it-subsidy-assistant/backend/eslint-results.json

  # セキュリティスキャン
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, dependency-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefer-offline
        cd it-subsidy-assistant/frontend && npm ci --prefer-offline
        cd ../backend && npm ci --prefer-offline

    - name: Run npm audit (Frontend)
      run: |
        cd it-subsidy-assistant/frontend
        echo "🔒 Running frontend security audit..."
        npm audit --audit-level moderate --json > npm-audit-frontend.json || true
        npm audit --audit-level moderate || echo "⚠️ Frontend audit found issues"

    - name: Run npm audit (Backend)
      run: |
        cd it-subsidy-assistant/backend
        echo "🔒 Running backend security audit..."
        npm audit --audit-level moderate --json > npm-audit-backend.json || true
        npm audit --audit-level moderate || echo "⚠️ Backend audit found issues"

    - name: Build verification
      run: |
        echo "🏗️ Verifying build process..."
        cd it-subsidy-assistant/frontend
        npm run build || (echo "❌ Frontend build failed" && exit 1)
        cd ../backend
        npm run build || (echo "❌ Backend build failed" && exit 1)
        echo "✅ All builds successful"

    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Snyk vulnerability scan (Frontend)
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        cd it-subsidy-assistant/frontend
        snyk test --json > snyk-results-frontend.json || true
        snyk test

    - name: Snyk vulnerability scan (Backend)
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        cd it-subsidy-assistant/backend
        snyk test --json > snyk-results-backend.json || true
        snyk test

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          it-subsidy-assistant/frontend/npm-audit-frontend.json
          it-subsidy-assistant/backend/npm-audit-backend.json
          it-subsidy-assistant/frontend/snyk-results-frontend.json
          it-subsidy-assistant/backend/snyk-results-backend.json

  # 単体テスト
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality

    strategy:
      matrix:
        test-suite: [frontend, backend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefer-offline
        cd it-subsidy-assistant/${{ matrix.test-suite }} && npm ci --prefer-offline

    - name: Run unit tests
      run: |
        cd it-subsidy-assistant/${{ matrix.test-suite }}
        npm test -- --coverage --watchAll=false --maxWorkers=2

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: it-subsidy-assistant/${{ matrix.test-suite }}/coverage
        flags: ${{ matrix.test-suite }}
        name: ${{ matrix.test-suite }}-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          it-subsidy-assistant/${{ matrix.test-suite }}/coverage/
          it-subsidy-assistant/${{ matrix.test-suite }}/test-results.xml

  # 統合テスト
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests, security-scan]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefer-offline
        cd it-subsidy-assistant/backend && npm ci --prefer-offline

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        cd it-subsidy-assistant/backend
        npm run db:migrate
        npm run db:seed

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
        JWT_REFRESH_SECRET: test-refresh-secret-key-for-testing-purposes-only
      run: |
        cd it-subsidy-assistant/backend
        npm run test:integration

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: it-subsidy-assistant/backend/integration-test-results/

  # E2Eテスト
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [integration-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefer-offline
        cd it-subsidy-assistant/frontend && npm ci --prefer-offline
        cd ../backend && npm ci --prefer-offline

    - name: Install Playwright
      run: |
        cd it-subsidy-assistant/frontend
        npx playwright install --with-deps

    - name: Build application
      run: |
        cd it-subsidy-assistant/frontend && npm run build
        cd ../backend && npm run build

    - name: Start test servers
      run: |
        cd it-subsidy-assistant/backend && npm start &
        cd it-subsidy-assistant/frontend && npm run serve &
        sleep 30

    - name: Run E2E tests
      run: |
        cd it-subsidy-assistant/frontend
        npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          it-subsidy-assistant/frontend/test-results/
          it-subsidy-assistant/frontend/playwright-report/

  # ビルドとデプロイ
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci --prefer-offline
        cd it-subsidy-assistant/frontend && npm ci --prefer-offline
        cd ../backend && npm ci --prefer-offline

    - name: Build applications
      run: |
        cd it-subsidy-assistant/frontend && npm run build
        cd ../backend && npm run build

    - name: Security scan of built artifacts
      run: |
        # 本番ビルドのセキュリティチェック
        echo "Scanning built artifacts for security issues..."
        # 実際の実装では、built artifactsのスキャンを実行

    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r it-subsidy-assistant/frontend/dist deployment-package/frontend
        cp -r it-subsidy-assistant/backend/dist deployment-package/backend
        cp -r it-subsidy-assistant/backend/package*.json deployment-package/backend/

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package/

    # 実際のデプロイ処理（環境に応じて調整）
    - name: Deploy to production
      id: deploy
      run: |
        echo "Deploying to production environment..."
        # 実際の実装では、AWS/GCP/Azureなどへのデプロイを実行
        echo "page_url=https://your-production-url.com" >> $GITHUB_OUTPUT

  # セキュリティ通知
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: failure()

    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 品質レポート生成
  quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate quality report
      run: |
        echo "# IT補助金アシスタント - 品質レポート" > quality-report.md
        echo "## ビルド情報" >> quality-report.md
        echo "- ブランチ: ${{ github.ref }}" >> quality-report.md
        echo "- コミット: ${{ github.sha }}" >> quality-report.md
        echo "- 実行時刻: $(date)" >> quality-report.md
        echo "" >> quality-report.md
        
        echo "## テスト結果" >> quality-report.md
        echo "- コード品質チェック: ${{ needs.code-quality.result }}" >> quality-report.md
        echo "- セキュリティスキャン: ${{ needs.security-scan.result }}" >> quality-report.md
        echo "- 単体テスト: ${{ needs.unit-tests.result }}" >> quality-report.md
        echo "- 統合テスト: ${{ needs.integration-tests.result }}" >> quality-report.md
        echo "- E2Eテスト: ${{ needs.e2e-tests.result }}" >> quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md

    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

# 品質ゲート設定
quality-gate:
  name: Quality Gate
  runs-on: ubuntu-latest
  needs: [dependency-validation, code-quality, security-scan, unit-tests]
  if: always()

  steps:
  - name: Evaluate quality gate
    run: |
      # すべての必須チェックが成功している場合のみ通過
      if [[ "${{ needs.dependency-validation.result }}" == "success" && 
            "${{ needs.code-quality.result }}" == "success" && 
            "${{ needs.security-scan.result }}" == "success" && 
            "${{ needs.unit-tests.result }}" == "success" ]]; then
        echo "✅ Quality gate passed"
        echo "✓ Dependency validation: ${{ needs.dependency-validation.result }}"
        echo "✓ Code quality: ${{ needs.code-quality.result }}"
        echo "✓ Security scan: ${{ needs.security-scan.result }}"
        echo "✓ Unit tests: ${{ needs.unit-tests.result }}"
        exit 0
      else
        echo "❌ Quality gate failed"
        echo "Dependency validation: ${{ needs.dependency-validation.result }}"
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        exit 1
      fi